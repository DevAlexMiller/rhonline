import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FaBars, FaUserPlus } from "react-icons/fa";
import { TiHome } from "react-icons/ti";
import { ImKey, ImExit } from "react-icons/im";
import { GiHouseKeys } from "react-icons/gi";
import { MySidebar, MenuItem, IconContainer, Label } from "./styles";

const Sidebar = () => {
Â  const [open, setOpen] = useState(false);
Â  const [isAdmin, setIsAdmin] = useState(false);
Â  const [cpfAsPassword, setCpfAsPassword] = useState(false); // ðŸ›‘ NOVO ESTADO
Â  const navigate = useNavigate();

Â  useEffect(() => {
Â  Â  const adminFlag = localStorage.getItem('isAdmin') === 'true'; 
Â  Â  setIsAdmin(adminFlag);
Â  Â  
Â  Â  // ðŸ›‘ VERIFICA O FLAG DE SENHA INSEGURA
Â  Â  const cpfAsPassFlag = localStorage.getItem('CPF_AS_PASSWORD') === 'true';
Â  Â  setCpfAsPassword(cpfAsPassFlag);

Â  Â  if (sessionStorage.length > 0) {
Â  Â  Â  Â  sessionStorage.clear();
Â  Â  }
Â  }, []);

Â  function onVerificationClick(index) {
Â  Â  // Se sidebar estiver fechada, abre antes de executar aÃ§Ã£o
Â  Â  if (!open) {
Â  Â  Â  setOpen(true);
Â  Â  Â  return;
Â  Â  }

    // ðŸ›‘ BLOQUEIO DE NAVEGAÃ‡ÃƒO
    // Se a senha for o CPF, sÃ³ permite ir para a tela de troca de senha (index 2) ou sair (index 5)
    if (cpfAsPassword && index !== 2 && index !== 5) {
        alert('VocÃª deve trocar sua senha antes de navegar para outras pÃ¡ginas.');
        // ForÃ§a a navegaÃ§Ã£o de volta para a tela de troca de senha
        navigate('/newPassword'); 
        return;
    }


Â  Â  // Roteamento
Â  Â  const routes = {
Â  Â  Â  1: "/home",
Â  Â  Â  2: "/newPassword", 
Â  Â  Â  3: "/resetPassword",
Â  Â  Â  4: "/newUser",
Â  Â  Â  5: "/", // Logout
Â  Â  };

Â  Â  // Se for logout (Ã­ndice 5)
Â  Â  if (index === 5) {
Â  Â  Â  localStorage.clear(); 
Â  Â  Â  navigate("/");
Â  Â  Â  return;
Â  Â  }

Â  Â  // Se for outra rota
Â  Â  if (routes[index]) {
Â  Â  Â  navigate(routes[index]);
Â  Â  }
Â  }

Â  const menuItems = [
Â  Â  { icon: <TiHome className="icon-home" />, label: "InÃ­cio", index: 1 },
Â  Â  { icon: <ImKey />, label: "Alterar senha", index: 2 },
Â  Â  ...(isAdmin
Â  Â  Â  ? [
Â  Â  Â  Â  Â  { icon: <GiHouseKeys />, label: "Gerenciar senhas", index: 3 },
Â  Â  Â  Â  Â  { icon: <FaUserPlus />, label: "Novo usuÃ¡rio", index: 4 },
Â  Â  Â  Â  ]
Â  Â  Â  : []),
Â  Â  { icon: <ImExit />, label: "Sair", index: 5 },
Â  ];
    
    // ðŸ›‘ LÃ³gica para aplicar estilo de bloqueio visual
    const getMenuItemStyle = (index) => {
        // Se a senha for o CPF E o item nÃ£o for a rota de troca de senha (2) ou Sair (5), aplica o estilo de bloqueio.
        if (cpfAsPassword && index !== 2 && index !== 5) {
            return { pointerEvents: 'none', opacity: 0.5 };
        }
        return {};
    };

Â  return (
Â  Â  <MySidebar $open={open}>
Â  Â  Â  <MenuItem style={{ marginBottom: "17vh" }}>
Â  Â  Â  Â  <IconContainer onClick={() => setOpen(!open)}>
Â  Â  Â  Â  Â  <FaBars />
Â  Â  Â  Â  </IconContainer>
Â  Â  Â  Â  {open && <Label></Label>}
Â  Â  Â  </MenuItem>

Â  Â  Â  {menuItems.map((item, idx) => (
Â  Â  Â  Â  <MenuItem 
            key={idx} 
            onClick={() => onVerificationClick(item.index)}
            style={getMenuItemStyle(item.index)} // ðŸ›‘ Aplica o estilo de bloqueio
        >
Â  Â  Â  Â  Â  <IconContainer>{item.icon}</IconContainer>
Â  Â  Â  Â  Â  {open && <Label>{item.label}</Label>}
Â  Â  Â  Â  </MenuItem>
Â  Â  Â  ))}
Â  Â  </MySidebar>
Â  );
};

export default Sidebar;