import React, { useState, useEffect } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import Button from '../../components/Button';
import axios from 'axios';
import {
Â  RoundedTable,
Â  GridContainer,
Â  QuantidadeWrapper,
Â  QuantidadeSelect,
Â  SearchWrapper,
Â  SearchInput,
Â  ButtonWrapper,
  FilterControls // ðŸ›‘ Importado o FilterControls
} from './styles';
import { BiSearch } from 'react-icons/bi';

const Grid = ({ columns, data, showAdminControls}) => {
Â  const [quantidade, setQuantidade] = useState(5);
Â  const [busca, setBusca] = useState('');
Â  const [isAdmin, setIsAdmin] = useState(false);
  const [statusMessage, setStatusMessage] = useState('');
  const [isSuccess, setIsSuccess] = useState(false);
  
Â  useEffect(() => {
Â  Â  const adminStatus = localStorage.getItem('isAdmin') === 'true';
Â  Â  setIsAdmin(adminStatus);
Â  }, []);

  const token = localStorage.getItem('authToken');
  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL
  const API_URL_CREATE = `${API_BASE_URL}/create-payroll-month`;
  const API_URL_DELETE = `${API_BASE_URL}/delete-payroll-month`;

  // [handleOpenMonth e handleDeleteMonth Functions]
  async function handleOpenMonth() {
    setStatusMessage('Abrindo mÃªs...');
    setIsSuccess(false);
    if (!token) { setStatusMessage('Erro: SessÃ£o nÃ£o autenticada.'); return; }
    if (!window.confirm("ATENÃ‡ÃƒO: VocÃª tem certeza que deseja abrir o prÃ³ximo perÃ­odo de folha?")) {
      Â  Â  Â  Â  setStatusMessage('Abertura de mÃªs cancelada.');
      Â  Â  Â  Â  return;
      Â  Â  }
      
      Â  Â  try {
      Â  Â  Â  Â  const response = await axios.post(API_URL_CREATE, {}, { headers: { Authorization: `Bearer ${token}` } });
      Â  Â  Â  Â  if (response.data.success) {
      Â  Â  Â  Â  Â  Â  const { ano, mes } = response.data.data;
      Â  Â  Â  Â  Â  Â  setIsSuccess(true);
      Â  Â  Â  Â  Â  Â  setStatusMessage(`PerÃ­odo ${mes}/${ano} aberto com sucesso!`); 
              setTimeout(() => {
                window.location.reload();
              }, 600);
      Â  Â  Â  Â  } else {
      Â  Â  Â  Â  Â  Â  setStatusMessage(`Erro: ${response.data.message}`);
      Â  Â  Â  Â  }
      Â  Â  } catch (error) {
      Â  Â  Â  Â  setIsSuccess(false);
      Â  Â  Â  Â  setStatusMessage(error.response?.data?.message || 'Falha ao conectar com o servidor.');
      Â  Â  }
  }

  async function handleDeleteMonth() {
    setStatusMessage('Excluindo Ãºltimo mÃªs...');
    setIsSuccess(false);
    if (!token) { setStatusMessage('Erro: SessÃ£o nÃ£o autenticada.'); return; }
    if (!window.confirm("ATENÃ‡ÃƒO: VocÃª tem certeza que deseja excluir o Ãºltimo mÃªs cadastrado?")) {
        setStatusMessage('ExclusÃ£o cancelada.');
        return;
    }
    try {
        const response = await axios.delete(API_URL_DELETE, { headers: { Authorization: `Bearer ${token}` } });
        if (response.data.success) {
            const { ano, mes } = response.data.data;
            setIsSuccess(true);
            setStatusMessage(`PerÃ­odo ${mes}/${ano} excluÃ­do com sucesso!`);
            setTimeout(() => {
              window.location.reload();
            }, 600);
        } else {
            setStatusMessage(`Erro: ${response.data.message}`);
        }
    } catch (error) {
        setIsSuccess(false);
        setStatusMessage(error.response?.data?.message || 'Falha ao conectar com o servidor.');
    }
  }


Â  const linhas = Array.isArray(data) ? data : Object.values(data);
Â  const linhasFiltradas = linhas.filter((linha) => { 
Â  Â  const termoBusca = busca.toLowerCase();
Â  Â  return Object.values(linha)
Â  Â  Â  .some(value => value?.toString().toLowerCase().includes(termoBusca));
Â  });
Â  const linhasExibidas = linhasFiltradas.slice(0, quantidade);
    
    const shouldShowButtons = isAdmin && showAdminControls;

Â  return (
Â  Â  <GridContainer>
Â  Â  Â  {/* Filtros */}
Â  Â  Â  <FilterControls> {/* ðŸ›‘ Usando FilterControls do styles.js */}
Â  Â  Â  Â  
Â  Â  Â  Â  {/* 1. Esquerda: Quantidade */}
Â  Â  Â  Â  <QuantidadeWrapper>
Â  Â  Â  Â  Â  <label htmlFor="quantidadeSelect">Quantidade:</label>
Â  Â  Â  Â  Â  <QuantidadeSelect
Â  Â  Â  Â  Â  Â  id="quantidadeSelect"
Â  Â  Â  Â  Â  Â  value={quantidade}
Â  Â  Â  Â  Â  Â  onChange={(e) => setQuantidade(Number(e.target.value))}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <option value={5}>5</option>
Â  Â  Â  Â  Â  Â  <option value={10}>10</option>
Â  Â  Â  Â  Â  Â  <option value={25}>25</option>
Â  Â  Â  Â  Â  Â  <option value={50}>50</option>
Â  Â  Â  Â  Â  Â  <option value={100}>100</option>
Â  Â  Â  Â  Â  Â  <option value={linhasFiltradas.length}>Todos</option>
Â  Â  Â  Â  Â  </QuantidadeSelect>
Â  Â  Â  Â  </QuantidadeWrapper>

        {/* ðŸ›‘ 2. CENTRO: BotÃµes de Admin (Com visibilidade para manter o espaÃ§o) */}
        <div style={{ 
            marginLeft: 'auto', 
            marginRight: 'auto',
            visibility: shouldShowButtons ? 'visible' : 'hidden', // MantÃ©m o espaÃ§o
            minWidth: '250px' 
        }}>
Â  Â  Â  Â  Â  <ButtonWrapper>
Â  Â  Â  Â  Â  Â  <Button onClick={handleOpenMonth}> 
Â  Â  Â  Â  Â  Â  Â  Abrir MÃªs
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  <Button onClick={handleDeleteMonth}> 
Â  Â  Â  Â  Â  Â  Â  Excluir MÃªs
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </ButtonWrapper>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* 3. Direita: Campo de Pesquisa */}
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <SearchWrapper>
Â  Â  Â  Â  Â  Â  <SearchInput
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="Pesquisar"
Â  Â  Â  Â  Â  Â  Â  value={busca}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setBusca(e.target.value)}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <BiSearch size="1.2em" color="#333" />
Â  Â  Â  Â  Â  </SearchWrapper>
Â  Â  Â  Â  </div>
Â  Â  Â  </FilterControls>

      {/* Exibe a mensagem de status */}
      {statusMessage && (
          <p style={{ color: isSuccess ? 'green' : 'red', fontWeight: 'bold', margin: '10px 0' }}>
              {statusMessage}
          </p>
      )}

Â  Â  Â  {/* Tabela */}
Â  Â  Â  <div style={{ borderRadius: '12px', overflow: 'hidden' }}>
Â  Â  Â  Â  <RoundedTable
Â  Â  Â  Â  Â  striped
Â  Â  Â  Â  Â  bordered
Â  Â  Â  Â  Â  hover
Â  Â  Â  Â  Â  responsive
Â  Â  Â  Â  Â  style={{ textAlign: 'center', verticalAlign: 'middle', marginBottom: 0 }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <thead className="table-light">
Â  Â  Â  Â  Â  Â  <tr>
                {columns.map((col, idx) => (
Â  Â  Â  Â  Â  Â  Â  Â  <th key={idx} style={{ textAlign: 'center' }}>{col.label}</th>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  <tbody>
                {linhasExibidas.map((linha, index) => (
Â  Â  Â  Â  Â  Â  Â  <tr key={index}>
Â  Â  Â  Â  Â  Â  Â  Â  {columns.map((col, idx) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <td key={idx} style={{ verticalAlign: 'middle' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {linha[col.key]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  </RoundedTable>
Â  Â  Â  </div>
Â  Â  </GridContainer>
Â  );
};

export default Grid;